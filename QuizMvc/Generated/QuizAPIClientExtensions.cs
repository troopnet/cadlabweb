// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace QuizMvc.QuizApi
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for QuizAPIClient.
    /// </summary>
    public static partial class QuizAPIClientExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='quizid'>
            /// </param>
            /// <param name='attemptid'>
            /// </param>
            public static Attempt GetAttempt(this IQuizAPIClient operations, string quizid, string attemptid)
            {
                return Task.Factory.StartNew(s => ((IQuizAPIClient)s).GetAttemptAsync(quizid, attemptid), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='quizid'>
            /// </param>
            /// <param name='attemptid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Attempt> GetAttemptAsync(this IQuizAPIClient operations, string quizid, string attemptid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAttemptWithHttpMessagesAsync(quizid, attemptid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='quizid'>
            /// </param>
            /// <param name='attemptReq'>
            /// </param>
            public static Attempt StartAttempt(this IQuizAPIClient operations, string quizid, AttemptRequest attemptReq)
            {
                return Task.Factory.StartNew(s => ((IQuizAPIClient)s).StartAttemptAsync(quizid, attemptReq), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='quizid'>
            /// </param>
            /// <param name='attemptReq'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Attempt> StartAttemptAsync(this IQuizAPIClient operations, string quizid, AttemptRequest attemptReq, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartAttemptWithHttpMessagesAsync(quizid, attemptReq, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='quizid'>
            /// </param>
            /// <param name='attemptid'>
            /// </param>
            public static AttemptScore GetAttemptScore(this IQuizAPIClient operations, string quizid, string attemptid)
            {
                return Task.Factory.StartNew(s => ((IQuizAPIClient)s).GetAttemptScoreAsync(quizid, attemptid), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='quizid'>
            /// </param>
            /// <param name='attemptid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AttemptScore> GetAttemptScoreAsync(this IQuizAPIClient operations, string quizid, string attemptid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAttemptScoreWithHttpMessagesAsync(quizid, attemptid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='quizid'>
            /// </param>
            /// <param name='attemptid'>
            /// </param>
            /// <param name='scoreReq'>
            /// </param>
            public static AttemptScore CalculateAttemptScore(this IQuizAPIClient operations, string quizid, string attemptid, ScoreRequest scoreReq)
            {
                return Task.Factory.StartNew(s => ((IQuizAPIClient)s).CalculateAttemptScoreAsync(quizid, attemptid, scoreReq), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='quizid'>
            /// </param>
            /// <param name='attemptid'>
            /// </param>
            /// <param name='scoreReq'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AttemptScore> CalculateAttemptScoreAsync(this IQuizAPIClient operations, string quizid, string attemptid, ScoreRequest scoreReq, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CalculateAttemptScoreWithHttpMessagesAsync(quizid, attemptid, scoreReq, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='quizid'>
            /// </param>
            public static IList<QuizQuestion> GetAllQuizQuestions(this IQuizAPIClient operations, string quizid)
            {
                return Task.Factory.StartNew(s => ((IQuizAPIClient)s).GetAllQuizQuestionsAsync(quizid), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='quizid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<QuizQuestion>> GetAllQuizQuestionsAsync(this IQuizAPIClient operations, string quizid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllQuizQuestionsWithHttpMessagesAsync(quizid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='quizid'>
            /// </param>
            /// <param name='question'>
            /// </param>
            public static object AddQuizQuestion(this IQuizAPIClient operations, string quizid, QuizQuestion question)
            {
                return Task.Factory.StartNew(s => ((IQuizAPIClient)s).AddQuizQuestionAsync(quizid, question), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='quizid'>
            /// </param>
            /// <param name='question'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AddQuizQuestionAsync(this IQuizAPIClient operations, string quizid, QuizQuestion question, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddQuizQuestionWithHttpMessagesAsync(quizid, question, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='quizid'>
            /// </param>
            /// <param name='questionid'>
            /// </param>
            public static QuizQuestion GetQuizQuestionById(this IQuizAPIClient operations, string quizid, string questionid)
            {
                return Task.Factory.StartNew(s => ((IQuizAPIClient)s).GetQuizQuestionByIdAsync(quizid, questionid), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='quizid'>
            /// </param>
            /// <param name='questionid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QuizQuestion> GetQuizQuestionByIdAsync(this IQuizAPIClient operations, string quizid, string questionid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetQuizQuestionByIdWithHttpMessagesAsync(quizid, questionid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='quizid'>
            /// </param>
            /// <param name='questionid'>
            /// </param>
            public static void DeleteQuizQuestion(this IQuizAPIClient operations, string quizid, string questionid)
            {
                Task.Factory.StartNew(s => ((IQuizAPIClient)s).DeleteQuizQuestionAsync(quizid, questionid), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='quizid'>
            /// </param>
            /// <param name='questionid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteQuizQuestionAsync(this IQuizAPIClient operations, string quizid, string questionid, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteQuizQuestionWithHttpMessagesAsync(quizid, questionid, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Quiz> GetAllQuizzes(this IQuizAPIClient operations)
            {
                return Task.Factory.StartNew(s => ((IQuizAPIClient)s).GetAllQuizzesAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Quiz>> GetAllQuizzesAsync(this IQuizAPIClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllQuizzesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='quiz'>
            /// </param>
            public static object CreateQuiz(this IQuizAPIClient operations, Quiz quiz)
            {
                return Task.Factory.StartNew(s => ((IQuizAPIClient)s).CreateQuizAsync(quiz), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='quiz'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateQuizAsync(this IQuizAPIClient operations, Quiz quiz, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateQuizWithHttpMessagesAsync(quiz, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Quiz GetQuizById(this IQuizAPIClient operations, string id)
            {
                return Task.Factory.StartNew(s => ((IQuizAPIClient)s).GetQuizByIdAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Quiz> GetQuizByIdAsync(this IQuizAPIClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetQuizByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteQuiz(this IQuizAPIClient operations, string id)
            {
                Task.Factory.StartNew(s => ((IQuizAPIClient)s).DeleteQuizAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteQuizAsync(this IQuizAPIClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteQuizWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
